; PREDEF, do not touch

def (do) (\ (& actions) (last actions))

(def unpack
  (\s (f l) "unpack + (1 2 3) <=> eval (cons (q +) (q (1 2 3)))"
      (eval (cons (eval f) (eval l)))))

(def fn
  (\m (& args) "fn add (x y) (+ x y) <=> def add (\ (x y) (+ x y))"
      (def
        , (head args)
        (unpack \ (tail args)))))

(fn pack (f & xs) "pack eval + 1 2 3 <=> eval (q (+ 1 2 3))"
         (f xs))

(def and
  (\s (& conditions)
      (if (len conditions)
        (if (eval (head conditions))
          (unpack and (tail conditions))
          0)
        1)))

(def time-it
  (\s (block) 
      "Times the given block of code in milliseconds. Returns tuple of result and time."
      (do
        (= start (time-ms))
        (= result (eval block))
        (= end (time-ms))
        (list result (- end start)))))

(fn replace
  (l original replacement) "Replaces all instances recursively."
  (if (== l original)
    replacement
    (if (atom? l)
      l
      (if (len l)
        (cons
          (replace (head l) original replacement)
          (replace (tail l) original replacement))))))

(fn q-all
  (l) "Quotes every element in the list, non-recursive."
  (if (len l)
    (cons
      (list (q q) (head l))
      (q-all (tail l)))))

(fn tail-rec-helper
  (recurse-aux body)
  "Replaces the recursion of a tail recursive function with an early return."
  (replace body recurse-aux
    (list 
      (q \) 
      (q (& arglist))
      (list 
        (q cons) 
        (list (q q) recurse-aux) 
        (q arglist)))))

(def tail-rec
  (\m (recurse-keyword lambda)
      "Tail recursion optimization. (tail-rec <recursion keyword> (\\(args) (<recursion keyword> (something-something args))))."
      (do
        (decomp (_ arg-list body) lambda)
        (\ ,arg-list
           (do
             (= inner_function 
               (\ ,arg-list
                  ,(tail-rec-helper recurse-keyword body)))
             (= control (unpack inner_function arg-list))
             (__while 
               (and (list? control) (== recurse-keyword (head control)))
               (= control 
                 (unpack inner_function (q-all (tail control)))))
             (control))))))

(def repeat
  (tail-rec recurse
    (\(n expr acc)
      (if (== 0 n)
        acc
        (recurse (- n 1) expr (cons expr acc))))))
;;
;;fun {reversed l} "Reverses a given Q expression. 'eval (reversed {2 1 +})'" {
;;  if (< 2 (len l)) 
;;    {join (reversed (tail l)) (head l)}
;;    {if (== 2 (len l)) {join (at 1 l) (at 0 l)} {l} }
;;}
;;
;;fun {repeat n expr} "Repeats an expression. 'unpack + (repeat 200 1)'" {if (== 0 n) {{}} {cons expr (repeat (- n 1) expr)}}
;;
;;(fun
;;  {range_step a b step}
;;  {if (!= a b)
;;    {cons a (range_step (+ a step) b step)}})
;;
;;(fun
;;  {range a b}
;;  "Increasing sequence from a to b, b is excluded." 
;;  {range_step a b 1})
;;
;;
;;fun {let body} "Opens up a new scope." { (\{} body) }
;;
;;fun {map f seq} "Transforms a sequence using f." {if (len seq) {cons (f (eval (head seq))) (map f (tail seq))}}
;;
;;(fun 
;;  {foreach seq f}
;;  {if (len seq) 
;;    {do
;;      (f (head seq))
;;      (foreach (tail seq) f)}})
;;
;;fun {filter f seq} "Filters a sequence using f." {
;;  if (len seq)
;;    {if (f (eval (head seq)))
;;      {join (head seq) (filter f (tail seq))}
;;      {filter f (tail seq)}}
;;}
;;
;;fun {zip a b} {
;;  if (& (len a) (len b))
;;    {join (list (join (head a) (head b))) (zip (tail a) (tail b))}
;;}
;;
;;(fun 
;;  {binary_search_impl col l r value error transform}
;;  {if (> l r)
;;    error
;;    {do
;;      (= {m} (+ l (/ (- r l) 2)))
;;      (= {mval} (transform (at_eval m col)))
;;      (if (< value mval)
;;        {binary_search_impl col l (- m 1) value error transform}
;;        {if (> value mval)
;;          {binary_search_impl col (+ m 1) r value error transform}
;;          {at_eval m col}})}})
;;
;;(fun {id x} {x})
;;
;;(fun
;;  {binary_search col value error}
;;  {binary_search_impl col 0 (- (len col) 1) value error id})
;;
;;(fun
;;  {binary_search_t col value error transform}
;;  {binary_search_impl col 0 (- (len col) 1) value error transform})
;;
;;(fun 
;;  {reduce f seq}
;;  "
;;Takes a function that reduces the sequence. The function should take 2 arguments.
;;The first argument is element of the sequence, while the second is the cumulative result
;;of the rest of the sequence. Both argument types are the same.
;;  "
;;  {if (> (len seq) 1)
;;    {f (eval (head seq)) (reduce f (tail seq))}
;;    {eval (head seq)}})
;;
;;(fun
;;  {fold_left z f seq}
;;  "
;;Folds left. Takes a: starting value, function that maps from type of starting value and type of sequence element to starting value type, and sequence.
;;  "
;;  {if (> (len seq) 1)
;;    {f z (eval (head seq))}})
;;
;;
;;fun {max a b} {if (>= a b) a b}
;;
;;fun {at_eval x xs} {eval (at x xs)}
;;
;;(fun 
;;  {drop n seq}
;;  {if n
;;    {drop (- n 1) (tail seq)}
;;    {seq}})
;;
;;(fun
;;  {take n seq}
;;  {reversed (drop (- (len seq) n) (reversed seq))})
;;
;;(fun
;;  {index_of_impl f n xs}
;;  {if (len xs)
;;    {if (f (eval (head xs)))
;;      n
;;      {index_of_impl f (+ n 1) (tail xs)}}
;;    -1})
;;
;;(fun
;;  {index_of f xs}
;;  {index_of_impl f 0 xs})
;;
;;(fun
;;  {contains f xs}
;;  {!= -1 (index_of f xs)})
;;
;;(fun
;;  {switch value & cases}
;;  {do
;;    (if (== 0 (len cases)) {err "Cases must contain at least a default case."})
;;    (= {idx} (index_of (\{x} {== value (eval (head x))}) (init cases)))
;;    (if (!= idx -1)
;;      {eval (tail (at idx cases))}
;;      {eval (last cases)})})
