; PREDEF, do not touch

def {fun} (
  \{args & body} 
  "Helper function for \\. 'fun {add x y} {+ x y}' defines a function assigned to add.\nYou can add a comment as well: 'fun {add x y} \"My binary add.\" {+ x y}' which will be shown when you enter 'help add'." 
  {
    def (head args) (
      if (== 1 (len body)) {
        \ (tail args) (eval body)
      } {
        \ (tail args) (eval (head body)) (eval (head (tail body)))
      }
    )
 }
)

fun {unpack f xs} "Unpacks an expression and applies given function to it. 'unpack + {1 2 3}'." {eval (cons f xs)}

fun {pack f & xs} "Packs an expression and applies given function to the resulting Q expression. 'pack eval + 1 2 3'" {f xs}

fun {reversed l} "Reverses a given Q expression. 'eval (reversed {2 1 +})'" {
  if (< 2 (len l)) 
    {join (reversed (tail l)) (head l)}
    {if (== 2 (len l)) {join (at 1 l) (at 0 l)} {l} }
}

fun {repeat n expr} "Repeats an expression. 'unpack + (repeat 200 1)'" {if (== 0 n) {{}} {cons expr (repeat (- n 1) expr)}}

(fun
  {range_step a b step}
  {if (!= a b)
    {cons a (range_step (+ a step) b step)}})

(fun
  {range a b}
  "Increasing sequence from a to b, b is excluded." 
  {range_step a b 1})

fun {do & actions} "Executes several actions in a row. Returns the value of the last action." {
  if (!= {} actions) { eval (last actions) }
}

fun {let body} "Opens up a new scope." { (\{} body) }

fun {map f seq} "Transforms a sequence using f." {if (len seq) {cons (f (eval (head seq))) (map f (tail seq))}}

(fun 
  {foreach seq f}
  {if (len seq) 
    {do
      (f (head seq))
      (foreach (tail seq) f)}})

fun {filter f seq} "Filters a sequence using f." {
  if (len seq)
    {if (f (eval (head seq)))
      {join (head seq) (filter f (tail seq))}
      {filter f (tail seq)}}
}

fun {zip a b} {
  if (& (len a) (len b))
    {join (list (join (head a) (head b))) (zip (tail a) (tail b))}
}

(fun 
  {binary_search_impl col l r value error transform}
  {if (> l r)
    error
    {do
      (= {m} (+ l (/ (- r l) 2)))
      (= {mval} (transform (at_eval m col)))
      (if (< value mval)
        {binary_search_impl col l (- m 1) value error transform}
        {if (> value mval)
          {binary_search_impl col (+ m 1) r value error transform}
          {at_eval m col}})}})

(fun {id x} {x})

(fun
  {binary_search col value error}
  {binary_search_impl col 0 (- (len col) 1) value error id})

(fun
  {binary_search_t col value error transform}
  {binary_search_impl col 0 (- (len col) 1) value error transform})

fun {reduce f seq} {
  if (> (len seq) 1)
    {f (eval (head seq)) (reduce f (tail seq))}
    {eval (head seq)}
}

fun {max a b} {if (>= a b) a b}

fun {at_eval x xs} {eval (at x xs)}

(fun 
  {drop n seq}
  {if n
    {drop (- n 1) (tail seq)}
    {seq}})

(fun
  {take n seq}
  {reversed (drop (- (len seq) n) (reversed seq))})

(fun
  {index_of_impl f n xs}
  {if (len xs)
    {if (f (eval (head xs)))
      n
      {index_of_impl f (+ n 1) (tail xs)}}
    -1})

(fun
  {index_of f xs}
  {index_of_impl f 0 xs})

(fun
  {contains f xs}
  {!= -1 (index_of f xs)})

(fun
  {switch value & cases}
  {do
    (if (== 0 (len cases)) {err "Cases must contain at least a default case."})
    (= {idx} (index_of (\{x} {== value (eval (head x))}) (init cases)))
    (if (!= idx -1)
      {tail (at_eval idx cases)}
      {eval (last cases)})})
